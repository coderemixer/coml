coml ::= combined splitter?;

(* Basic Token *)

whitespace ::= " " | "\t";
whitespaces ::= whitespace+;
eol ::= "\r\n" | "\r" | "\n";
splitter ::= whitespaces | eol+ | whitespaces splitter | eol+ splitter;

(* Basic Types *)

basicTypes ::= number | boolean | string | array | hash | patchKey | patch | "nil" | "undefined";

(* Basic Types: Number *)

decDigit ::= #'[0-9]';
nonZeroDecDigit ::= #'[1-9]';
decInteger ::= "0" | nonZeroDecDigit decDigit*;

exponentIndicator ::= "e" | "E";
exponentPart ::= exponentIndicator decDigit+
               | exponentIndicator "-" decDigit+
               | exponentIndicator "+" decDigit+;
unsignedFloat ::= decInteger "f"
                | decInteger "." decDigit+ exponentPart*;

binDigit ::= #'[0-1]';
binInteger ::= "0b" binDigit+;

octDigit ::= #'[0-7]';
octInteger ::= "0o" octDigit+ | "0" octDigit+;

hexDigit ::= #'[0-9a-fA-F]';
hexInteger ::= "0x" hexDigit+;

unsignedInteger ::= decInteger | binInteger | octInteger | hexInteger;
signedInteger ::= unsignedInteger | "-" unsignedInteger | "+" unsignedInteger;
signedFloat ::= unsignedFloat | "-" unsignedFloat | "+" unsignedFloat;

number ::= signedInteger | signedFloat;

(* Basic Types: Boolean *)

boolean ::= "true" | "false";

(* Basic Types: Array *)

arrayElement ::= splitter? expr splitter?;
arrayElements ::= arrayElement "," arrayElement | arrayElement "," | arrayElement;

inlineArrayElement ::= (whitespaces?) "-" whitespaces? expr splitter?;
inlineArrayElements ::= inlineArrayElement | inlineArrayElement eol+ inlineArrayElements;

array ::= "[" splitter? arrayElements splitter? "]"
        | "[" splitter? "]"
        | inlineArrayElements;

(* Basic Types: Hash *)

keyCharStart ::= #'[a-zA-Z_]';

keyCharMiddle ::= keyCharStart | decDigit;
key ::= keyCharStart keyCharMiddle*;
hashElement ::= (whitespaces?) key (splitter?) ":" (splitter?) expr;
hash ::= hashElement | hashElement eol+ hash;

(* Basic Types: String *)

string ::= #'".*?"' | #'\'.*?\'';

(* Import *)

import ::= "import" whitespaces (string) whitespaces "as" whitespaces key;
imports ::= import | import eol+ imports;

(* Patch *)

patchKey ::= patchKey "." key
           | patchKey "[" whitespaces? (string | signedInteger) whitespaces? "]"
           | patchKey "[" whitespaces? signedInteger whitespaces? ".." whitespaces? signedInteger whitespaces? "]"
           | patchKey "[" whitespaces? signedInteger whitespaces? "..." whitespaces? signedInteger whitespaces? "]"
           | key;

patchReplace ::= patchKey whitespaces? "=" splitter? expr;
patchAppend ::= patchKey whitespaces? "<<" splitter? expr
              | patchKey whitespaces? "+=" splitter? expr;
patchPrepend ::= patchKey whitespaces? ">>" splitter? expr;

patchKeyVal ::= patchReplace | patchAppend | patchPrepend;
patchKeyVals ::= patchKeyVal | patchKeyVal eol+ whitespaces? patchKeyVals whitespaces?;
patch ::= "(" patchKey ")" splitter? "{" splitter? patchKeyVals splitter? "}" splitter?
        | "(" patchKey ")" splitter? "+=" splitter? expr splitter?;

(* Combination *)

expr ::= basicTypes
       | expr splitter? "??" splitter? expr
       | expr splitter? "+" splitter? expr
       | expr splitter? "-" splitter? expr
       | expr splitter? "*" splitter? expr
       | expr splitter? "/" splitter? expr
       | expr splitter? "%" splitter? expr
       | "(" splitter? expr splitter? ")";

combined ::= expr
           | imports eol+ expr;
